
/*string[,] table = new string[2,3];                      // 2 размерности: строки и столбцы

int[,] matrix = new int [5,8];   */                      // прямоугольная таблица чисел,матрица


//Пишем код

/*string[,] table = new string[2, 5];
//для строк инициализация происходит такой константой String.Empty
// индексы с нуля 
//table[0,0]

table[1, 2] = "слово";                              // чтоб обратиться к нужному нам значению

for (int rows = 0; rows < 2; rows++)
                                    //для того, чтобы распечатать массив
{
    for(int columns = 0;columns < 5; columns++)
    {
        Console.WriteLine($"-{table[rows, columns]}-");
    }
}*/





/*void PrintArray( int[,] matrix)
{
for(int i = 0; i < matrix.GetLength(0); i++)               //0 - количество строк
{
   for(int j = 0; j < matrix.GetLength(1); j++)            //1 - количество столбцов
   {
      Console.Write($"{matrix[i, j]} ");
   }
Console.WriteLine();
}
}

void FillArray(int[,]matrix)           //метод,который будет заполнять матрицу случайными числами 
{
   for(int i = 0; i < matrix.GetLength(0); i++) //0 -указывает или возвращает количество строк в массиве
   {
       for(int j = 0; j < matrix.GetLength(1); j++)  // GetLength(1) - столбцов в массиве
       {
          matrix[i,j] = new Random().Next(1,10);

       } 

   }
}
int[,]matrix = new int [3, 4];                // обязательное условие new и тип данных
PrintArray(matrix);                                      //вызываем метод
FillArray(matrix);
Console.WriteLine();
PrintArray(matrix);*/


/*
//Закрашиваем картинку

//Находим точку на картинке х,y.Двигаемся по алгоритму -вверх,влево,вниз,вправо.
// Если идем наверх  х-1,y  так как минусуется строка.
// Если идём влево ,то минусуем столбец     x,y-1 .
// Ecли идём вниз x+1,y - плюсуем строку.
//Если идём вправо  x,y+1.
//Можно двигаться по диагонали, но для этого нужно проверять дополнительные условия.

// Сразу определяем ПОРЯДОК ДЕЙСТВИЙ ! Сейчас двигаемся -вверх,влево,вниз и вправо.







int[,]pic = new int[,] //необязательно указывать кол-во строк и столбцов,если есть фиксированные данные
{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
{0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};


void PrintImage(int[,]image)
{

   for(int i = 0; i < image.GetLength(0); i++ )
   {   
       for(int j = 0; j < image.GetLength(1); j++)
       {
          if(image[i,j] == 0) Console.Write($" "); // если текущий индекс совпадает с 0,
                                                  //искусственно печатаем пробел,
       
          else Console.Write($"+");               //+ рисует очертания руки.
       }
       Console.WriteLine();
   }
}

void FillImage(int row, int col) //позиция строки и пикселя, c кот.начнём закрашивать
{

  if(pic[row,col]==0)    //если текущий пиксель c указан.позицией row,col равен 0 -незакрашен
  {

     pic[row,col]= 1;       //будем красить   1.
     FillImage(row-1,col);
     FillImage(row,col-1);
     FillImage(row+1,col);
     FillImage(row,col+1);  //оставаясь в предыдущей строке, идём вправо.

  }
}


PrintImage(pic);
FillImage(13, 13);  // в качестве случайной точки укажем 13,13(точка внутри, с кот.начинаем рисовать)
PrintImage(pic);

// для изображения требуется много ресурсов, но на небольших изображениях можно.*/



/*// Рекурсия(Функция,которая вызывает сама себя). На примере Факториала(вычисление факториала).
//Факториал- произведение чисел от 1 до заданного ( 5!=5*4*3*2*1 )
// 5*4!   4*3!  3*2!  - функция , умноженная на саму себя.

int Factorial (int n)                   //метод принимает число,факториал которого надо вычислить
{                                     //принимает число и возвращает факториал этого числа
// 1!=1   0!=1
   if(n==1) return 1;                         //ecли дошли до единицы,должны вернуть 1
   else return n * Factorial (n-1);          //текущее значение умножили на факториал предыдущего числа

}
Console.WriteLine(Factorial(3));//   1*2*3=6*/


/*
//double способен переваривать такие числа как 40! переполнение типа

double Factorial (int n)
{

     if(n==1) return 1;
     else return n * Factorial (n-1);

}
for(int i = 0; i < 40; i++)
{
    Console.WriteLine($"{i}! = {Factorial(i)}");

}*/     // не работает - overflow



/*// Числа Фибоначчи.Рекурсия.  Каждое последующее число равно сумме двух предыдущих

// f(1) = 1
// f(2) = 1
// f(n) = f(n-1) + f(n-2)

int Fibonacci(int n) 
{
    if( n == 1 || n == 2) return 1;
    else return Fibonacci(n-1) + Fibonacci(n-2);

}
for(int i = 1; i < 10; i++)                        // покажем первые 10 чисел
{

  Console.WriteLine(Fibonacci(i));

}

//можно также использовать double в начале метода. < 50, например, когда.*/



// Как обойти директорию